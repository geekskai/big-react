(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.react = {}));
})(this, (function (exports) { 'use strict';

	const currentDispatcher = {
	    current: null
	};
	const resolveDispatcher = () => {
	    const dispatcher = currentDispatcher.current;
	    if (dispatcher === null) {
	        throw new Error('hook 只能在函数组件中执行！');
	    }
	    return dispatcher;
	};

	const ReactCurrentBatchConfig = {
	    transition: null
	};

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;
	const REACT_FRAGMENT_TYPE = supportSymbol
	    ? Symbol.for('react.fragment')
	    : 0xeacb;
	const REACT_CONTEXT_TYPE = supportSymbol
	    ? Symbol.for('react.context')
	    : 0xeacc;
	const REACT_PROVIDER_TYPE = supportSymbol
	    ? Symbol.for('react.provider')
	    : 0xeac2;

	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'geeks.kai'
	    };
	    return element;
	};
	const isValidElement$1 = (object) => {
	    return (typeof object === 'object' &&
	        object !== null &&
	        object.$$typeof === REACT_ELEMENT_TYPE);
	};
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (const prop in config) {
	        const value = config[prop];
	        if (prop === 'key') {
	            if (value !== undefined) {
	                key = '' + value;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (value !== undefined) {
	                ref = value;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = value;
	        }
	    }
	    const maybeChildrenLength = maybeChildren.length;
	    if (maybeChildrenLength) {
	        if (maybeChildrenLength === 1) {
	            props.children = maybeChildren[0];
	        }
	        else {
	            props.children = maybeChildren;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	function createContext(defaultValue) {
	    const context = {
	        $$typeof: REACT_CONTEXT_TYPE,
	        Provider: null,
	        _currentValue: defaultValue
	    };
	    context.Provider = {
	        $$typeof: REACT_PROVIDER_TYPE,
	        _context: context
	    };
	    return context;
	}

	const useState = (initialState) => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useState(initialState);
	};
	const useEffect = (create, deps) => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useEffect(create, deps);
	};
	const useTransition = () => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useTransition();
	};
	const useRef = (initialValue) => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useRef(initialValue);
	};
	const useContext = (context) => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useContext(context);
	};
	// 内部数据共享层
	const __SECRET_INTERNAL_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
	    currentDispatcher,
	    currentBatchConfig: ReactCurrentBatchConfig
	};
	const version = '0.0.0';
	// TODO:根据环境区分使用jsx/jsxDEV
	const createElement = jsx;
	const isValidElement = isValidElement$1;

	exports.Fragment = REACT_FRAGMENT_TYPE;
	exports.__SECRET_INTERNAL_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = __SECRET_INTERNAL_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
	exports.createContext = createContext;
	exports.createElement = createElement;
	exports.isValidElement = isValidElement;
	exports.useContext = useContext;
	exports.useEffect = useEffect;
	exports.useRef = useRef;
	exports.useState = useState;
	exports.useTransition = useTransition;
	exports.version = version;

}));
