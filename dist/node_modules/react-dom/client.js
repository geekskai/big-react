(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('scheduler'), require('react')) :
	typeof define === 'function' && define.amd ? define(['scheduler', 'react'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.client = factory(global.scheduler, global.React));
})(this, (function (scheduler, React) { 'use strict';

	function _interopNamespaceDefault(e) {
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n.default = e;
		return Object.freeze(n);
	}

	var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

	const FunctionComponent = 0;
	const HostRoot = 3; // react.render() 函数的第一个参数
	const HostComponent = 5;
	const HostText = 6; // 比如说是 <div>123</div> 中的123就是属于HostText
	const Fragment = 7;
	const ContextProvider = 8;

	const NoFlags = 0b00000000000000000000000000;
	const Placement = 0b00000000000000000000000010;
	const Update = 0b00000000000000000000000100;
	const ChildDeletion = 0b00000000000000000000010000;
	// 当前fiber本次更新存在副作用，需要更新fiber
	// 至于是存在哪种副作（useEffect或者useLayoutEffect）用需要进一步判断
	const PassiveEffect = 0b00000000000000000000100000;
	const Ref = 0b00000000000000000001000000;
	// 包含这些字段就代表 需要执行 mutation 操作
	const MutationMask = Placement | Update | ChildDeletion | Ref;
	// 包含这些字段就代表 需要执行 layout 操作
	const LayoutMask = Ref;
	// 包含这些字段就代表本次更新存在副作用，需要触发effect操作
	const PassiveMask = PassiveEffect | ChildDeletion;

	const ReactCurrentBatchConfig = {
	    transition: null
	};

	// lane 做为update的优先级,数值越小代表优先级越高
	const NoLane = 0b00000;
	const NoLanes = 0b00000;
	const SyncLane = 0b00001;
	const InputContinuesLane = 0b00010;
	const DefaultLane = 0b00100;
	const TransitionLane = 0b0100;
	function mergeLanes(laneA, laneB) {
	    return laneA | laneB;
	}
	function requestUpdateLane() {
	    const isTransition = ReactCurrentBatchConfig.transition !== null;
	    if (isTransition) {
	        return TransitionLane;
	    }
	    // 从上下文环境获取Scheduler的优先级  默认是并发更新
	    const currentSchedulerPriority = scheduler.unstable_getCurrentPriorityLevel();
	    const lane = schedulerPriorityToLane(currentSchedulerPriority);
	    return lane;
	}
	function getHightPriorityLane(lanes) {
	    //  返回最小的那个 比如说 0b0110 那么返回 0b0010 反正返回最靠右的那个
	    return lanes & -lanes;
	}
	//  判断优先级是否足够 比较一个lane 是否在一个lanes中才能算足够
	function isSubsetOfLanes(set, subset) {
	    return (set & subset) === subset;
	}
	// 从一个lanes中移除某个lane
	function markRootFinished(root, lane) {
	    root.pendingLanes &= ~lane;
	}
	function lanesToSchedulerPriority(lanes) {
	    const lane = getHightPriorityLane(lanes);
	    if (lane === SyncLane) {
	        return scheduler.unstable_ImmediatePriority;
	    }
	    if (lane === InputContinuesLane) {
	        return scheduler.unstable_UserBlockingPriority;
	    }
	    if (lane === DefaultLane) {
	        return scheduler.unstable_NormalPriority;
	    }
	    return scheduler.unstable_IdlePriority;
	}
	function schedulerPriorityToLane(schedulerPriority) {
	    if (schedulerPriority === scheduler.unstable_ImmediatePriority) {
	        return SyncLane;
	    }
	    if (schedulerPriority === scheduler.unstable_UserBlockingPriority) {
	        return InputContinuesLane;
	    }
	    if (schedulerPriority === scheduler.unstable_NormalPriority) {
	        return DefaultLane;
	    }
	    return NoLane;
	}

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;
	const REACT_FRAGMENT_TYPE = supportSymbol
	    ? Symbol.for('react.fragment')
	    : 0xeacb;
	const REACT_PROVIDER_TYPE = supportSymbol
	    ? Symbol.for('react.provider')
	    : 0xeac2;

	class FiberNode {
	    type;
	    tag;
	    pendingProps;
	    key;
	    stateNode;
	    ref;
	    return;
	    sibling;
	    child;
	    index;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    flags;
	    subtreeFlags;
	    updateQueue;
	    deletions;
	    constructor(tag, pendingProps, key) {
	        // 实例
	        this.tag = tag;
	        this.key = key || null;
	        // stateNode是什么：假如是<div> 那么就是div这个dom
	        this.stateNode = null;
	        // FiberNode的类型：如果是function组件那么他的type就是这个函数本身
	        this.type = null;
	        // 构成树状结构
	        this.return = null;
	        this.sibling = null;
	        this.child = null;
	        this.index = 0;
	        this.ref = null;
	        // 作为工作单元
	        this.pendingProps = pendingProps;
	        this.memoizedProps = null;
	        this.memoizedState = null;
	        this.updateQueue = null;
	        this.alternate = null;
	        // 副作用
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	        this.deletions = null;
	    }
	}
	class FiberRootNode {
	    container;
	    current;
	    finishedWork;
	    pendingLanes;
	    finishLane; // 本次更新需要消费的lane
	    pendingPassiveEffects;
	    callbackNode;
	    callbackPriority;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	        this.pendingLanes = NoLanes;
	        this.finishLane = NoLane;
	        this.callbackNode = null;
	        this.callbackPriority = NoLane;
	        this.pendingPassiveEffects = {
	            unmount: [],
	            update: []
	        };
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        // mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.type = current.type;
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	        wip.deletions = null;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.ref = current.ref;
	    // 数据
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	};
	function createFiberFromElement(element) {
	    const { type, key, props, ref } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // <div/> type:div
	        fiberTag = HostComponent;
	    }
	    else if (typeof type === 'object' &&
	        type.$$typeof === REACT_PROVIDER_TYPE) {
	        fiberTag = ContextProvider;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn(`createFiberFromElement 未知的type类型:${element}`);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    fiber.ref = ref;
	    // fiber.lanes = lanes
	    return fiber;
	}
	function createFiberFromFragment(elements, key) {
	    const fiber = new FiberNode(Fragment, elements, key);
	    return fiber;
	}

	const createUpdate = (action, lane) => {
	    return {
	        action,
	        lane,
	        next: null
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        },
	        dispatch: null
	    };
	};
	const enqueueUpdate = (updateQueue, update) => {
	    // updateQueue.shared.pending = update;
	    const pending = updateQueue.shared.pending;
	    if (pending === null) {
	        // 假设进来的update为 a, update.next 也是 a,  那么pending 为: a -> a
	        update.next = update;
	    }
	    else {
	        // 假设进来的update为b
	        //  c.next = b.next = a
	        update.next = pending.next;
	        // b.next = c
	        pending.next = update;
	    }
	    //  pending为c: c->a->b->c
	    updateQueue.shared.pending = update;
	};
	const processUpdateQueue = (baseState, pendingUpdate, renderLane) => {
	    const result = {
	        memoizedState: baseState,
	        baseState,
	        baseQueue: null
	    };
	    if (pendingUpdate !== null) {
	        // 第一个update
	        const first = pendingUpdate.next;
	        let pending = pendingUpdate.next;
	        let newBaseState = baseState;
	        let newBaseQueueFirst = null;
	        let newBaseQueueLast = null;
	        // newState是本次一次计算得出的结果
	        let newState = baseState;
	        // 因为pendingUpdate 是一个环状链表
	        do {
	            const updateLane = pending.lane;
	            if (!isSubsetOfLanes(renderLane, updateLane)) {
	                // 优先级不够 被跳过
	                // clone 就是这个被跳过的update，先保存起来
	                const clone = createUpdate(pending.action, pending.lane);
	                // 先判断当前这个是不是第一个被跳过的
	                if (newBaseQueueFirst === null) {
	                    // 是当前第一个被跳过的 first=u0 last=u0
	                    newBaseQueueFirst = clone;
	                    newBaseQueueLast = clone;
	                    newBaseState = newState;
	                }
	                else {
	                    // first u0 -> u1->u2
	                    // last  u2
	                    // 形成单项链表
	                    newBaseQueueLast.next = clone;
	                    newBaseQueueLast = clone;
	                }
	            }
	            else {
	                // 优先级足够的情况下
	                if (newBaseQueueLast !== null) {
	                    const clone = createUpdate(pending.action, NoLane);
	                    newBaseQueueLast.next = clone;
	                    newBaseQueueLast = clone;
	                }
	                const action = pending.action;
	                if (action instanceof Function) {
	                    newState = action(baseState);
	                }
	                else {
	                    newState = action;
	                }
	            }
	            pending = pending.next;
	        } while (pending !== first);
	        // 本次计算没有update被跳过
	        if (newBaseQueueLast === null) {
	            newBaseState = newState;
	        }
	        else {
	            // 存在update被跳过 将单项链表闭合，形成环状的链表
	            newBaseQueueLast.next = newBaseQueueFirst;
	        }
	        result.memoizedState = newState;
	        result.baseState = newBaseState;
	        result.baseQueue = newBaseQueueLast;
	    }
	    return result;
	};

	// 合成事件
	const elementPropsKey = '__props';
	const validEventList = ['click'];
	// dom[xx] = createElement props
	function updateFiberProps(node, props) {
	    node[elementPropsKey] = props;
	}
	function initEvent(container, eventType) {
	    if (!validEventList.includes(eventType)) {
	        console.warn(`当前不支持${eventType}事件！`);
	        return;
	    }
	    {
	        console.log(`初始化事件：${eventType}`);
	    }
	    container.addEventListener(eventType, (event) => {
	        dispatchEvent(container, eventType, event);
	    });
	}
	function createSyntheticEvent(event) {
	    const syntheticEvent = event;
	    syntheticEvent.__stopPropagation = false;
	    const originStopPropagation = event.stopPropagation;
	    syntheticEvent.stopPropagation = () => {
	        syntheticEvent.__stopPropagation = true;
	        originStopPropagation?.();
	    };
	    return syntheticEvent;
	}
	function dispatchEvent(container, eventType, event) {
	    const targetElement = event.target;
	    if (targetElement === null) {
	        console.warn(`事件不存在target：${event}`);
	        return;
	    }
	    // 1. 收集沿途的事件
	    const { bubble, capture } = collectPaths(targetElement, container, eventType);
	    // 2. 构造合成事件
	    const se = createSyntheticEvent(event);
	    // 3. 遍历capture
	    triggerEventFlow(capture, se);
	    if (!se.__stopPropagation) {
	        // 4. 遍历bubble
	        triggerEventFlow(bubble, se);
	    }
	}
	function triggerEventFlow(paths, se) {
	    for (let index = 0; index < paths.length; index++) {
	        const callback = paths[index];
	        scheduler.unstable_runWithPriority(eventTypeToSchedulerPriority(se.type), () => {
	            callback.call(null, se);
	        });
	        if (se.__stopPropagation) {
	            break;
	        }
	    }
	}
	function getEventCallbackNameFromEventType(eventType) {
	    return {
	        click: ['onClickCapture', 'onClick']
	    }[eventType];
	}
	function collectPaths(targetElement, container, eventType) {
	    const paths = {
	        capture: [],
	        bubble: []
	    };
	    while (targetElement && targetElement !== container) {
	        // 收集
	        const elementProps = targetElement[elementPropsKey];
	        if (elementProps) {
	            // click => onClick onClickCapture
	            const callbackNameList = getEventCallbackNameFromEventType(eventType);
	            if (callbackNameList) {
	                callbackNameList.forEach((callbackName, index) => {
	                    const eventCallback = elementProps[callbackName];
	                    if (eventCallback) {
	                        if (index === 0) {
	                            //  capture 模拟捕获阶段事件
	                            paths.capture.unshift(eventCallback);
	                        }
	                        else {
	                            // 模拟冒泡事件阶段
	                            paths.bubble.push(eventCallback);
	                        }
	                    }
	                });
	            }
	        }
	        targetElement = targetElement.parentNode;
	    }
	    return paths;
	}
	function eventTypeToSchedulerPriority(eventType) {
	    switch (eventType) {
	        case 'click':
	        case 'keydown':
	        case 'keyup':
	            return scheduler.unstable_ImmediatePriority;
	        case 'scroll':
	            return scheduler.unstable_UserBlockingPriority;
	        default:
	            return scheduler.unstable_NormalPriority;
	    }
	}

	// export const createInstance = (type: string, props: any): Instance => {
	const createInstance = (type, props) => {
	    // TODO: 处理: props
	    const element = document.createElement(type);
	    updateFiberProps(element, props);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;
	function commitUpdate(fiber) {
	    switch (fiber.tag) {
	        case HostText:
	            const text = fiber.memoizedProps.content;
	            return commitTextUpdate(fiber.stateNode, text);
	        case HostComponent:
	            return updateFiberProps(fiber.stateNode, fiber.memoizedProps);
	        default:
	            {
	                console.warn('未实现的Update类型', fiber);
	            }
	            break;
	    }
	}
	function commitTextUpdate(textInstance, content) {
	    textInstance.textContent = content;
	}
	function removeChild(child, container) {
	    container.removeChild(child);
	}
	function insertChildToContainer(child, container, before) {
	    container.insertBefore(child, before);
	}
	const scheduleMicroTask = typeof queueMicrotask === 'function'
	    ? queueMicrotask
	    : typeof Promise === 'function'
	        ? (callback) => Promise.resolve(null).then(callback)
	        : setTimeout;

	// shouldTrackEffects 是否追踪副作用 ,mount的时候不需要追踪副作用
	function ChildReconciler(shouldTrackEffects) {
	    function deleteChild(returnFiber, childToDelete) {
	        if (!shouldTrackEffects) {
	            return;
	        }
	        const deletions = returnFiber.deletions;
	        if (deletions === null) {
	            returnFiber.deletions = [childToDelete];
	            returnFiber.flags |= ChildDeletion;
	        }
	        else {
	            deletions.push(childToDelete);
	        }
	    }
	    function deleteRemainingChildren(returnFiber, currentFirstChild) {
	        if (!shouldTrackEffects) {
	            return;
	        }
	        let childToDelete = currentFirstChild;
	        while (childToDelete !== null) {
	            deleteChild(returnFiber, childToDelete);
	            childToDelete = childToDelete.sibling;
	        }
	    }
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        const key = element.key;
	        // update
	        while (currentFiber !== null) {
	            if (currentFiber.key === key) {
	                // key 相同
	                if (element.$$typeof === REACT_ELEMENT_TYPE) {
	                    if (currentFiber.type === element.type) {
	                        let props = element.props;
	                        if (currentFiber.type === REACT_FRAGMENT_TYPE) {
	                            props = element.props.children;
	                        }
	                        // type 相同
	                        const existing = useFiber(currentFiber, props);
	                        existing.return = returnFiber;
	                        // 当前节点可复用，标记剩下的节点为删除
	                        deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                        return existing;
	                    }
	                    //key相同  type不同 删除所有旧的
	                    deleteRemainingChildren(returnFiber, currentFiber);
	                    break;
	                }
	                else {
	                    {
	                        console.warn('还未实现的react类型', element);
	                        break;
	                    }
	                }
	            }
	            else {
	                // key 不相同,删除旧的
	                deleteChild(returnFiber, currentFiber);
	                currentFiber = currentFiber.sibling;
	            }
	        }
	        // 根据element 创建fiber
	        let fiber;
	        if (element.type === REACT_FRAGMENT_TYPE) {
	            fiber = createFiberFromFragment(element.props.children, key);
	        }
	        else {
	            fiber = createFiberFromElement(element);
	        }
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        while (currentFiber !== null) {
	            // update
	            if (currentFiber.tag === HostText) {
	                // 类型没变，可以复用
	                const existing = useFiber(currentFiber, { content });
	                existing.return = returnFiber;
	                deleteRemainingChildren(returnFiber, currentFiber.sibling);
	                return existing;
	            }
	            deleteChild(returnFiber, currentFiber);
	            currentFiber = currentFiber.sibling;
	        }
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function placeSingleChild(fiber) {
	        // 首屏渲染的情况下
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    function reconcileChildrenArray(returnFiber, currentFirstChild, newChild) {
	        //  最后一个可复用的fiber 在current中的index
	        let lastPlacedIndex = 0;
	        // 创建的最后一个fiber
	        let lastNewFiber = null;
	        // 创建的第一个fiber
	        let firstNewFiber = null;
	        // 1. 将current 保存在map中
	        const existingChildren = new Map();
	        let current = currentFirstChild;
	        while (current !== null) {
	            const keyToUse = current.key !== null ? current.key : current.index;
	            existingChildren.set(keyToUse, current);
	            current = current.sibling;
	        }
	        for (let index = 0; index < newChild.length; index++) {
	            // 2. 遍历newChild ，寻找是否可复用
	            const after = newChild[index];
	            const newFiber = updateFromMap(returnFiber, existingChildren, index, after);
	            if (newFiber === null) {
	                continue;
	            }
	            //  3. 标记移动还是插入
	            newFiber.index = index;
	            newFiber.return = returnFiber;
	            if (lastNewFiber === null) {
	                lastNewFiber = newFiber;
	                firstNewFiber = newFiber;
	            }
	            else {
	                lastNewFiber.sibling = newFiber;
	                lastNewFiber = lastNewFiber.sibling;
	            }
	            if (!shouldTrackEffects) {
	                continue;
	            }
	            const current = newFiber.alternate;
	            if (current !== null) {
	                const oldIndex = current.index;
	                if (oldIndex < lastPlacedIndex) {
	                    // 移动
	                    newFiber.flags |= Placement;
	                    continue;
	                }
	                else {
	                    // 不移动
	                    lastPlacedIndex = oldIndex;
	                }
	            }
	            else {
	                // mount
	                newFiber.flags |= Placement;
	            }
	        }
	        // 4. 将Map中剩下的编辑为删除
	        existingChildren.forEach((fiber) => {
	            deleteChild(returnFiber, fiber);
	        });
	        return firstNewFiber;
	    }
	    function updateFromMap(returnFiber, existingChildren, index, element) {
	        const keyToUse = element.key !== null ? element.key : index;
	        // 更新之前存在对应的节点
	        const before = existingChildren.get(keyToUse);
	        // HostText
	        if (typeof element === 'string' || typeof element === 'number') {
	            if (before) {
	                if (before.tag === HostText) {
	                    existingChildren.delete(keyToUse);
	                    //  可以复用before
	                    return useFiber(before, { content: element + '' });
	                }
	            }
	            return new FiberNode(HostText, { content: element + '' }, null);
	        }
	        // ReactElement
	        if (typeof element === 'object' && element !== null) {
	            switch (element.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    if (element.type === REACT_FRAGMENT_TYPE) {
	                        return updateFragment$1(returnFiber, before, element, keyToUse, existingChildren);
	                    }
	                    if (before) {
	                        if (before.type === element.type) {
	                            existingChildren.delete(keyToUse);
	                            return useFiber(before, element.props);
	                        }
	                    }
	                    return createFiberFromElement(element);
	            }
	            // TODO:数组类型
	            if (Array.isArray(element) && true) {
	                console.warn('还未实现数组类型的child');
	            }
	        }
	        if (Array.isArray(element)) {
	            return updateFragment$1(returnFiber, before, element, keyToUse, existingChildren);
	        }
	        return null;
	    }
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        //  判断fragment
	        const isUnkeyedTopLevelFragment = typeof newChild === 'object' &&
	            newChild !== null &&
	            newChild.type === REACT_FRAGMENT_TYPE &&
	            newChild.key === null;
	        if (isUnkeyedTopLevelFragment) {
	            newChild = newChild.props.children;
	        }
	        // 判断当前fiber的类型
	        if (typeof newChild === 'object' && newChild !== null) {
	            // 多节点的情况 ul > li*3
	            if (Array.isArray(newChild)) {
	                return reconcileChildrenArray(returnFiber, currentFiber, newChild);
	            }
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型', newChild);
	                    }
	                    break;
	            }
	        }
	        // HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        // 兜底删除
	        if (currentFiber !== null) {
	            deleteRemainingChildren(returnFiber, currentFiber);
	        }
	        {
	            console.warn('未实现的reconcile类型：', newChild);
	        }
	        return null;
	    };
	}
	function useFiber(fiber, pendingProps) {
	    const clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	}
	function updateFragment$1(returnFiber, current, elements, key, existingChildren) {
	    let fiber;
	    if (!current || current.tag !== Fragment) {
	        fiber = createFiberFromFragment(elements, key);
	    }
	    else {
	        existingChildren.delete(key);
	        fiber = useFiber(current, elements);
	    }
	    fiber.return = returnFiber;
	    return fiber;
	}
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	const internals = React__namespace.__SECRET_INTERNAL_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	// 只要组件中使用了 useEffect，那么组件对应的fiber节点就会被打上这个tag
	const Passive = 0b0010;
	// TODO: 接下来还有 useLayoutEffect
	// 用于判断useEffect的回调函数是否需要执行
	const HookHasEffect = 0b0001;

	let currentlyRenderingFiber = null;
	let workInProgressHook = null;
	let currentHook = null;
	let renderLane = NoLane;
	const { currentDispatcher } = internals;
	function renderWithHooks(wip, lane) {
	    // 赋值操作
	    currentlyRenderingFiber = wip;
	    // 重置 hooks 链表
	    wip.memoizedState = null;
	    // 重置effect链表
	    wip.updateQueue = null;
	    renderLane = lane;
	    const current = wip.alternate;
	    // update
	    if (current !== null) {
	        currentDispatcher.current = HooksDispatcherOnUpdate;
	    }
	    else {
	        currentDispatcher.current = HooksDispatcherOnMount;
	    }
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    const children = Component(props);
	    // 重置操作
	    currentlyRenderingFiber = null;
	    workInProgressHook = null;
	    currentHook = null;
	    renderLane = NoLane;
	    return children;
	}
	const HooksDispatcherOnMount = {
	    useState: mountState,
	    useEffect: mountEffect,
	    useTransition: mountTransition,
	    useRef: mountRef,
	    useContext: readContext
	};
	const HooksDispatcherOnUpdate = {
	    useState: updateState,
	    useEffect: updateEffect,
	    useTransition: updateTransition,
	    useRef: updateRef,
	    useContext: readContext
	};
	function mountRef(initialValue) {
	    const hook = mountWorkInProgressHook();
	    const ref = { current: initialValue };
	    hook.memoizedState = ref;
	    return ref;
	}
	function updateRef() {
	    const hook = updateWorkInProgressHook();
	    return hook.memoizedState;
	}
	function mountEffect(create, deps) {
	    const hook = mountWorkInProgressHook();
	    const nextDeps = deps === undefined ? null : deps;
	    currentlyRenderingFiber.flags |= PassiveEffect;
	    hook.memoizedState = pushEffect(Passive | HookHasEffect, create, undefined, nextDeps);
	}
	function updateEffect(create, deps) {
	    const hook = updateWorkInProgressHook();
	    const nextDeps = deps === undefined ? null : deps;
	    let destroy;
	    if (currentHook !== null) {
	        const prevEffect = currentHook.memoizedState;
	        destroy = prevEffect.destroy;
	        if (nextDeps !== null) {
	            // 浅比较依赖
	            const prevDeps = prevEffect.deps;
	            if (areHookInputsEqual(nextDeps, prevDeps)) {
	                //  依赖相等 不应该触发回调
	                hook.memoizedState = pushEffect(Passive, create, destroy, nextDeps);
	                return;
	            }
	        }
	        // 浅比较 不相等
	        currentlyRenderingFiber.flags |= PassiveEffect;
	        hook.memoizedState = pushEffect(Passive | HookHasEffect, create, destroy, nextDeps);
	    }
	}
	function areHookInputsEqual(nextDeps, prevDeps) {
	    if (prevDeps === null || nextDeps === null) {
	        // 对应useEffect第二个参数没有的情况
	        return false;
	    }
	    for (let index = 0; index < prevDeps.length && index < nextDeps.length; index++) {
	        if (Object.is(prevDeps[index], nextDeps[index])) {
	            continue;
	        }
	        return false;
	    }
	    return true;
	}
	function pushEffect(hookFlags, create, destroy, deps) {
	    const effect = {
	        tag: hookFlags,
	        create,
	        destroy,
	        deps,
	        next: null
	    };
	    const fiber = currentlyRenderingFiber;
	    const updateQueue = fiber.updateQueue;
	    if (updateQueue === null) {
	        const updateQueue = createFCUpdateQueue();
	        fiber.updateQueue = updateQueue;
	        //  形成环状链表
	        effect.next = effect;
	        updateQueue.lastEffect = effect;
	    }
	    else {
	        // 插入effect
	        const lastEffect = updateQueue.lastEffect;
	        if (lastEffect === null) {
	            effect.next = effect;
	            updateQueue.lastEffect = effect;
	        }
	        else {
	            const firstEffect = lastEffect.next;
	            lastEffect.next = effect;
	            effect.next = firstEffect;
	            updateQueue.lastEffect = effect;
	        }
	    }
	    return effect;
	}
	function createFCUpdateQueue() {
	    const updateQueue = createUpdateQueue();
	    updateQueue.lastEffect = null;
	    return updateQueue;
	}
	function updateState() {
	    // 找的当前useState对应的hook的数据
	    const hook = updateWorkInProgressHook();
	    //  计算新state的逻辑
	    const queue = hook.updateQueue;
	    const baseState = hook.baseState;
	    const pending = queue.shared.pending;
	    const current = currentHook;
	    let baseQueue = current.baseQueue;
	    if (pending !== null) {
	        // pending中的update和baseQueue中的update都保存在current中
	        if (baseQueue !== null) {
	            // baseQueue:     b2->b0->b1->b2
	            // pendingQueue:  p2->p0->p1->p2
	            // b0
	            const baseFirst = baseQueue.next;
	            // p0
	            const pendingFirst = pending.next;
	            // b2->p0
	            baseQueue.next = pendingFirst;
	            // p2->b0
	            pending.next = baseFirst;
	            // 最后：p2->b0->b1->b2->p0->p1->p2 形成环状链表
	        }
	        baseQueue = pending;
	        // 保存在current中
	        current.baseQueue = pending;
	        queue.shared.pending = null;
	    }
	    if (baseQueue !== null) {
	        const { memoizedState, baseQueue: newBaseQueue, baseState: newBaseState } = processUpdateQueue(baseState, baseQueue, renderLane);
	        hook.memoizedState = memoizedState;
	        hook.baseQueue = newBaseQueue;
	        hook.baseState = newBaseState;
	    }
	    return [hook.memoizedState, queue.dispatch];
	}
	function updateWorkInProgressHook() {
	    // TODO: 在render阶段触发的更新
	    let nextCurrentHook = null;
	    if (currentHook === null) {
	        // 这是这个FC update时的第一个hook
	        const current = currentlyRenderingFiber?.alternate;
	        if (current !== null) {
	            nextCurrentHook = current?.memoizedState;
	        }
	        else {
	            // current 为null 代表mount 阶段，不应该进入这个逻辑的，可能是一些边界情况
	            nextCurrentHook = null;
	        }
	    }
	    else {
	        //  这个FC update时后续的hook
	        nextCurrentHook = currentHook.next;
	    }
	    if (nextCurrentHook === null) {
	        // mount/update u1 u2 u3
	        // update       u1 u2 u3 u4
	        throw new Error(`组件${currentlyRenderingFiber?.type}在本次执行的hook比上次执行的多`);
	    }
	    currentHook = nextCurrentHook;
	    const newHook = {
	        memoizedState: currentHook.memoizedState,
	        updateQueue: currentHook.updateQueue,
	        next: null,
	        baseQueue: currentHook.baseQueue,
	        baseState: currentHook.baseState
	    };
	    if (workInProgressHook === null) {
	        // update 时 第一个hook
	        if (currentlyRenderingFiber === null) {
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = newHook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // update 时 后续的hook,为了行成一个单向的链表
	        workInProgressHook.next = newHook;
	        workInProgressHook = newHook;
	    }
	    return workInProgressHook;
	}
	function mountState(initialState) {
	    // 找到当前useState对应的hook数据
	    const hook = mountWorkInProgressHook();
	    let memoizedState;
	    if (initialState instanceof Function) {
	        memoizedState = initialState();
	    }
	    else {
	        memoizedState = initialState;
	    }
	    const queue = createUpdateQueue();
	    hook.updateQueue = queue;
	    hook.memoizedState = memoizedState;
	    hook.baseState = memoizedState;
	    // @ts-ignore
	    const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
	    queue.dispatch = dispatch;
	    return [memoizedState, dispatch];
	}
	function mountTransition() {
	    const [isPending, setPending] = mountState(false);
	    const hook = mountWorkInProgressHook();
	    const start = startTransition.bind(null, setPending);
	    hook.memoizedState = start;
	    return [isPending, start];
	}
	function updateTransition() {
	    const [isPending] = updateState();
	    const hook = updateWorkInProgressHook();
	    const start = hook.memoizedState;
	    return [isPending, start];
	}
	function startTransition(setPending, callback) {
	    setPending(true);
	    const prevTransition = ReactCurrentBatchConfig.transition;
	    ReactCurrentBatchConfig.transition = 1;
	    callback();
	    setPending(false);
	    ReactCurrentBatchConfig.transition = prevTransition;
	}
	function dispatchSetState(fiber, updateQueue, action) {
	    const lane = requestUpdateLane();
	    const update = createUpdate(action, lane);
	    enqueueUpdate(updateQueue, update);
	    scheduleUpdateOnFiber(fiber, lane);
	}
	function mountWorkInProgressHook() {
	    const hook = {
	        memoizedState: null,
	        updateQueue: null,
	        next: null,
	        baseQueue: null,
	        baseState: null
	    };
	    if (workInProgressHook === null) {
	        // mount时 第一个hook
	        if (currentlyRenderingFiber === null) {
	            throw new Error('请在函数组件内调用hook');
	        }
	        else {
	            workInProgressHook = hook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // mount时 后续的hook,为了行成一个单向的链表,存在memoizedState上
	        workInProgressHook.next = hook;
	        workInProgressHook = hook;
	    }
	    return workInProgressHook;
	}
	function readContext(context) {
	    const consumer = currentlyRenderingFiber;
	    if (consumer === null) {
	        throw new Error('只能在函数组建中调用useContext');
	    }
	    const value = context._currentValue;
	    return value;
	}

	let prevContextValue = null;
	const prevContextValueStack = [];
	function pushProvider(context, newValue) {
	    prevContextValueStack.push(prevContextValue);
	    prevContextValue = context._currentValue;
	    context._currentValue = newValue;
	}
	function popProvider(context) {
	    context._currentValue = prevContextValue;
	    prevContextValue = prevContextValueStack.pop();
	}

	// 递归中的递阶段
	const beginWork = (workInProgress, renderLane) => {
	    //比较，然后返回子fiberNode
	    switch (workInProgress.tag) {
	        case HostRoot:
	            return updateHostRoot(workInProgress, renderLane);
	        case HostComponent:
	            return updateHostComponent(workInProgress);
	        case HostText:
	            return null;
	        case FunctionComponent:
	            return updateFunctionComponent(workInProgress, renderLane);
	        case Fragment:
	            return updateFragment(workInProgress);
	        case ContextProvider:
	            return updateContextProvider(workInProgress);
	        default:
	            {
	                console.warn('在beginWork 中，出现未实现的类型！');
	            }
	            break;
	    }
	    return null;
	};
	function updateContextProvider(workInProgress) {
	    const providerType = workInProgress.type;
	    console.log(`🚀 ~ file: beginWork.ts:51 ~ providerType:`, providerType);
	    const context = providerType._context;
	    const newProps = workInProgress.pendingProps;
	    console.log(`🚀 ~ file: beginWork.ts:57 ~ newProps:`, newProps);
	    pushProvider(context, newProps.value);
	    const nextChildren = newProps.children;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	}
	function updateFragment(workInProgress) {
	    const nextChildren = workInProgress.pendingProps;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	}
	function updateFunctionComponent(workInProgress, renderLane) {
	    const nextChildren = renderWithHooks(workInProgress, renderLane);
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	}
	function updateHostRoot(workInProgress, renderLane) {
	    const baseState = workInProgress.memoizedState;
	    const updateQueue = workInProgress.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pending, renderLane);
	    workInProgress.memoizedState = memoizedState;
	    const nextChildren = workInProgress.memoizedState;
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	}
	// TODO: renderLane
	function updateHostComponent(workInProgress, renderLane) {
	    // 根据element创建fibreNode
	    const nextProps = workInProgress.pendingProps;
	    const nextChildren = nextProps.children;
	    markRef$1(workInProgress.alternate, workInProgress);
	    reconcileChildren(workInProgress, nextChildren);
	    return workInProgress.child;
	}
	function reconcileChildren(workInProgress, children) {
	    const current = workInProgress.alternate;
	    if (current !== null) {
	        // update
	        workInProgress.child = reconcileChildFibers(workInProgress, current?.child, children);
	    }
	    else {
	        // mount
	        workInProgress.child = mountChildFibers(workInProgress, null, children);
	    }
	    // reconcileChildFibers(workInProgress, current?.child, children);
	}
	function markRef$1(current, workInProgress) {
	    const ref = workInProgress.ref;
	    if ((current === null && ref !== null) ||
	        (current !== null && current.ref !== ref)) {
	        workInProgress.flags |= Ref;
	    }
	}

	let nextEffect = null;
	// 以DFS形式执行
	const commitEffects = (phrase, mask, callback) => {
	    return (finishedWork, root) => {
	        nextEffect = finishedWork;
	        while (nextEffect !== null) {
	            //向下遍历
	            const child = nextEffect.child;
	            if ((nextEffect.subtreeFlags & mask) !== NoFlags && child !== null) {
	                // 子节点存在对应mutation的操作
	                nextEffect = child;
	            }
	            else {
	                // 要么找到底了，要么不存在mutation，向上遍历DFS
	                up: while (nextEffect !== null) {
	                    callback(nextEffect, root);
	                    const sibling = nextEffect.sibling;
	                    if (sibling !== null) {
	                        nextEffect = sibling;
	                        break up;
	                    }
	                    // 向上
	                    nextEffect = nextEffect.return;
	                }
	            }
	        }
	    };
	};
	const commitMutationEffects = commitEffects('mutation', MutationMask | PassiveMask, commitMutationEffectsOnFiber);
	const commitLayoutEffects = commitEffects('layout', LayoutMask, commitLayoutEffectsOnFiber);
	// export const commitMutationEffects = (
	// 	finishedWork: FiberNode,
	// 	root: FiberRootNode
	// ) => {
	// 	nextEffect = finishedWork;
	// 	while (nextEffect !== null) {
	// 		//向下遍历
	// 		const child: FiberNode | null = nextEffect.child;
	// 		if (
	// 			(nextEffect.subtreeFlags & (MutationMask | PassiveMask)) !== NoFlags &&
	// 			child !== null
	// 		) {
	// 			// 子节点存在对应mutation的操作
	// 			nextEffect = child;
	// 		} else {
	// 			// 要么找到底了，要么不存在mutation，向上遍历DFS
	// 			up: while (nextEffect !== null) {
	// 				commitMutationEffectsOnFiber(nextEffect, root);
	// 				const sibling: FiberNode | null = nextEffect.sibling;
	// 				if (sibling !== null) {
	// 					nextEffect = sibling;
	// 					break up;
	// 				}
	// 				// 向上
	// 				nextEffect = nextEffect.return;
	// 			}
	// 		}
	// 	}
	// };
	function commitLayoutEffectsOnFiber(finishedWork, root) {
	    const { flags, tag } = finishedWork;
	    if ((flags & Ref) !== NoFlags && tag === HostComponent) {
	        // 绑定新的ref
	        safelyAttachRef(finishedWork);
	        // 从flags中移除Placement
	        finishedWork.flags &= ~Ref;
	    }
	}
	function safelyAttachRef(fiber) {
	    const ref = fiber.ref;
	    if (ref !== null) {
	        const instance = fiber.stateNode;
	        if (typeof ref === 'function') {
	            ref(instance);
	        }
	        else {
	            ref.current = instance;
	        }
	    }
	}
	function commitMutationEffectsOnFiber(finishedWork, root) {
	    const { flags, tag } = finishedWork;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        // 从flags中移除Placement
	        finishedWork.flags &= ~Placement;
	    }
	    // flags Update
	    if ((flags & Update) !== NoFlags) {
	        commitUpdate(finishedWork);
	        finishedWork.flags &= ~Update;
	    }
	    // flags ChildDeletion
	    if ((flags & ChildDeletion) !== NoFlags) {
	        const deletions = finishedWork.deletions;
	        if (deletions !== null) {
	            deletions.forEach((childToDelete) => {
	                commitDeletion(childToDelete, root);
	            });
	        }
	    }
	    if ((flags & PassiveEffect) !== NoFlags) {
	        // 收集因deps变化而需要执行的useEffect 的回调函数
	        commitPassiveEffect(finishedWork, root, 'update');
	        finishedWork.flags &= ~PassiveEffect;
	    }
	    if ((flags & Ref) !== NoFlags && tag === HostComponent) {
	        safelyDetachRef(finishedWork);
	    }
	}
	// 解绑之前的ref
	function safelyDetachRef(current) {
	    const ref = current.ref;
	    if (ref !== null) {
	        if (typeof ref === 'function') {
	            ref(null);
	        }
	        else {
	            ref.current = null;
	        }
	    }
	}
	function commitPassiveEffect(fiber, root, type) {
	    // update unmount
	    if (fiber.tag !== FunctionComponent ||
	        (type === 'update' && (fiber.flags & PassiveEffect) === NoFlags)) {
	        return;
	    }
	    const updateQueue = fiber.updateQueue;
	    if (updateQueue !== null) {
	        if (updateQueue.lastEffect === null && true) {
	            console.error('当FC存在PassiveEffect flag 时，不应该不存在effect');
	        }
	        root.pendingPassiveEffects[type].push(updateQueue.lastEffect);
	    }
	}
	function commitHookEffectList(flags, lastEffect, callback) {
	    let effect = lastEffect.next;
	    //  遍历环状链表
	    do {
	        if ((effect.tag & flags) === flags) {
	            callback(effect);
	        }
	        effect = effect.next;
	    } while (effect !== lastEffect.next);
	}
	function commitHookEffectListUnmount(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const destroy = effect.destroy;
	        if (typeof destroy === 'function') {
	            destroy();
	        }
	        effect.tag &= ~HookHasEffect;
	    });
	}
	function commitHookEffectListDestroy(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const destroy = effect.destroy;
	        if (typeof destroy === 'function') {
	            destroy();
	        }
	    });
	}
	function commitHookEffectListCreate(flags, lastEffect) {
	    commitHookEffectList(flags, lastEffect, (effect) => {
	        const create = effect.create;
	        if (typeof create === 'function') {
	            effect.destroy = create();
	        }
	    });
	}
	function recordHostChildrenToDelete(childrenToDelete, unmountFiber) {
	    //1. 找到第一个root host 节点
	    const lastOne = childrenToDelete[childrenToDelete.length - 1];
	    if (!lastOne) {
	        childrenToDelete.push(unmountFiber);
	    }
	    else {
	        let node = lastOne.sibling;
	        while (node !== null) {
	            if (node === unmountFiber) {
	                childrenToDelete.push(unmountFiber);
	            }
	            node = node.sibling;
	        }
	    }
	}
	function commitDeletion(childToDelete, root) {
	    const rootChildrenToDeletion = [];
	    // 递归子树
	    commitNestedComponent(childToDelete, (unmountFiber) => {
	        switch (unmountFiber.tag) {
	            case HostComponent:
	                recordHostChildrenToDelete(rootChildrenToDeletion, unmountFiber);
	                // 解绑ref
	                safelyDetachRef(unmountFiber);
	                return;
	            case HostText:
	                recordHostChildrenToDelete(rootChildrenToDeletion, unmountFiber);
	                return;
	            case FunctionComponent:
	                // TODO: 解绑ref
	                commitPassiveEffect(unmountFiber, root, 'unmount');
	                return;
	            default:
	                {
	                    console.warn('未处理的unmount类型', unmountFiber);
	                }
	                break;
	        }
	    });
	    // 移除rootHostComponent的DOM
	    if (rootChildrenToDeletion.length) {
	        const hostParent = getHostParent(childToDelete);
	        if (hostParent !== null) {
	            rootChildrenToDeletion.forEach((node) => {
	                removeChild(node.stateNode, hostParent);
	            });
	        }
	    }
	    childToDelete.return = null;
	    childToDelete.child = null;
	}
	function commitNestedComponent(root, onCommitUnmount) {
	    let node = root;
	    while (true) {
	        onCommitUnmount(node);
	        if (node.child !== null) {
	            // 向下遍历
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        // 终止条件
	        if (node === root) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === root) {
	                return;
	            }
	            // 向上归
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	function commitPlacement(finishedWork) {
	    {
	        console.warn('执行commitPlacement', finishedWork);
	    }
	    // parent DOM
	    const hostParent = getHostParent(finishedWork);
	    // 找到host sibling
	    const sibling = getHostSibling(finishedWork);
	    // finishWork DOM append parent DOM
	    if (hostParent !== null) {
	        insertOrAppendPlacementNodeIntoContainer(finishedWork, hostParent, sibling);
	    }
	}
	function getHostSibling(fiber) {
	    let node = fiber;
	    findSibling: while (true) {
	        while (node.sibling === null) {
	            const parent = node.return;
	            if (parent === null ||
	                parent.tag === HostComponent ||
	                parent.tag === HostRoot) {
	                return null;
	            }
	            node = parent;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	        // 向下遍历
	        while (node.tag !== HostText && node.tag !== HostComponent) {
	            // 不是稳定的节点
	            if ((node.flags & Placement) !== NoFlags) {
	                continue findSibling;
	            }
	            if (node.child === null) {
	                continue findSibling;
	            }
	            else {
	                node.child.return = node;
	                node = node.child;
	            }
	        }
	        if ((node.flags & Placement) === NoFlags) {
	            return node.stateNode;
	        }
	    }
	    // const sibling = fiber.sibling;
	}
	function getHostParent(fiber) {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('没有找到host parent');
	    }
	    return null;
	}
	function insertOrAppendPlacementNodeIntoContainer(finishedWork, hostParent, before) {
	    // 递归向下找这个
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        if (before) {
	            insertChildToContainer(finishedWork.stateNode, hostParent, before);
	        }
	        else {
	            appendChildToContainer(hostParent, finishedWork.stateNode);
	        }
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        insertOrAppendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            insertOrAppendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	// 递归中的归阶段
	function markRef(fiber) {
	    fiber.flags |= Ref;
	}
	function markUpdate(fiber) {
	    fiber.flags |= Update;
	}
	// 递归中的归
	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) {
	                // update
	                // 1. props 是否变化{onClick:xx} {onClick:'xxxx'}
	                // 2. 变了 Update flag
	                markUpdate(wip);
	                // 标记Ref
	                if (current.ref !== wip.ref) {
	                    markRef(wip);
	                }
	            }
	            else {
	                // mount
	                // 1. 构建DOM
	                const instance = createInstance(wip.type, newProps);
	                // 2. 将DOM插入到DOM树中
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	                // 标记Ref
	                if (wip.ref !== null) {
	                    markRef(wip);
	                }
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) {
	                // update
	                const oldText = current.memoizedProps.content;
	                const newText = newProps.content;
	                if (oldText !== newText) {
	                    markUpdate(wip);
	                }
	            }
	            else {
	                // 1. 构建DOM
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	        case FunctionComponent:
	        case Fragment:
	            bubbleProperties(wip);
	            return null;
	        case ContextProvider:
	            const context = wip.type._context;
	            popProvider(context);
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.log(`🚀 ~ file: completeWork.ts:24 ~ 未处理的wip:`, wip);
	            }
	            break;
	    }
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return; // 回到原点
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	let syncQueue = null;
	//  用于保证多次更新，syncQueue只遍历执行一次
	let isFlushingSyncQueue = false;
	function scheduleSyncCallback(callback) {
	    if (syncQueue === null) {
	        syncQueue = [callback];
	    }
	    else {
	        syncQueue.push(callback);
	    }
	}
	function flushSyncCallbacks() {
	    if (!isFlushingSyncQueue && syncQueue) {
	        isFlushingSyncQueue = true;
	        try {
	            syncQueue.forEach((callback) => callback());
	        }
	        catch (error) {
	            {
	                console.log('flushSyncCallbacks报错', error);
	            }
	        }
	        finally {
	            isFlushingSyncQueue = false;
	            syncQueue = null;
	        }
	    }
	}

	let workInProgress = null;
	// 用于保存本次更新的lane
	let wipRootRenderLane = NoLane;
	const RootInComplete = 1; // 中断了
	const RootCompleted = 2; // 完成了
	// TODO: 执行过程中报错了
	function prepareFreshStack(root, lane) {
	    root.finishLane = NoLane;
	    root.finishedWork = null;
	    workInProgress = createWorkInProgress(root.current, {});
	    wipRootRenderLane = lane;
	}
	function scheduleUpdateOnFiber(fiber, lane) {
	    // TODO: 调度功能
	    const root = markUpdateFromFiberToRoot(fiber);
	    markRootUpdated(root, lane);
	    ensureRootIsScheduled(root);
	}
	// schedule 阶段入口
	function ensureRootIsScheduled(root) {
	    const updateLane = getHightPriorityLane(root.pendingLanes);
	    const existingCallback = root.callbackNode;
	    //  NoLane 代表没有更新
	    if (updateLane === NoLane) {
	        if (existingCallback !== null) {
	            scheduler.unstable_cancelCallback(existingCallback);
	        }
	        root.callbackNode = null;
	        root.callbackPriority = NoLane;
	        return;
	    }
	    const curPriority = updateLane;
	    const prevPriority = root.callbackPriority;
	    if (curPriority === prevPriority) {
	        return;
	    }
	    //出现了不同的优先级 取消之前的调度
	    if (existingCallback !== null) {
	        scheduler.unstable_cancelCallback(existingCallback);
	    }
	    let newCallbackNode = null;
	    {
	        console.log(`在${updateLane === SyncLane ? '微' : '宏'}任务中调度，优先级：`, updateLane);
	    }
	    if (updateLane === SyncLane) {
	        // 同步优先级 用微任务调度
	        //   将每次产生的更新就会将 render阶段的入口函数performSyncWorkOnRoot 放进一个syncQueue数组队列中，
	        scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	        //  通过微任务的形式依次循环执行，
	        scheduleMicroTask(flushSyncCallbacks);
	    }
	    else {
	        // 其他优先级 用宏任务调度
	        const schedulerPriority = lanesToSchedulerPriority(updateLane);
	        newCallbackNode = scheduler.unstable_scheduleCallback(schedulerPriority, 
	        // @ts-ignore
	        performConcurrentWorkOnRoot.bind(null, root));
	    }
	    root.callbackNode = newCallbackNode;
	    root.callbackPriority = curPriority;
	}
	function markRootUpdated(root, lane) {
	    root.pendingLanes = mergeLanes(root.pendingLanes, lane);
	}
	function performConcurrentWorkOnRoot(root, didTimeout) {
	    // 保证useEffect 回调执行
	    const curCallback = root.callbackNode;
	    const didFlushPassiveEffect = flushPassiveEffects(root.pendingPassiveEffects);
	    if (didFlushPassiveEffect) {
	        if (root.callbackNode !== curCallback) {
	            //  触发了更新，且更新的优先级比当前高
	            return null;
	        }
	    }
	    const lane = getHightPriorityLane(root.pendingLanes);
	    const curCallbackNode = root.callbackNode;
	    if (lane === NoLane) {
	        return null;
	    }
	    const needSync = lane === SyncLane || didTimeout;
	    // render 阶段
	    const exitStatus = renderRoot(root, lane, !needSync);
	    ensureRootIsScheduled(root);
	    if (exitStatus === RootInComplete) {
	        // 中断
	        if (root.callbackNode !== curCallbackNode) {
	            //  有更高优先级的事情进来
	            return null;
	        }
	        return performConcurrentWorkOnRoot.bind(null, root);
	    }
	    if (exitStatus === RootCompleted) {
	        const finishedWork = root.current.alternate;
	        root.finishedWork = finishedWork;
	        root.finishLane = lane;
	        wipRootRenderLane = NoLane;
	        commitRoot(root);
	    }
	    else {
	        console.error(`还未实现的并发更新结束状态`);
	    }
	}
	function performSyncWorkOnRoot(root) {
	    //  由于这个函数会多次执行，需要选出优先级最高的执行
	    const nextLane = getHightPriorityLane(root.pendingLanes);
	    if (nextLane !== SyncLane) {
	        // 非同步优先级，可能是其他比SyncLane低的优先级，也可能是NoLane
	        ensureRootIsScheduled(root);
	        return;
	    }
	    const exitStatus = renderRoot(root, nextLane, false);
	    if (exitStatus === RootCompleted) {
	        const finishedWork = root.current.alternate;
	        root.finishedWork = finishedWork;
	        root.finishLane = nextLane;
	        wipRootRenderLane = NoLane;
	        // wip fiberNode树,树中的flags
	        commitRoot(root);
	    }
	    else {
	        console.error(`还未实现的同步更新结束状态`);
	    }
	}
	function renderRoot(root, lane, shouldTimeSlice) {
	    {
	        console.log(`开始${shouldTimeSlice ? '并发' : '同步'}更新`, root);
	    }
	    if (wipRootRenderLane !== lane) {
	        //初始化
	        prepareFreshStack(root, lane);
	    }
	    do {
	        try {
	            // render 阶段
	            shouldTimeSlice ? workLoopConcurrent() : workLoopSync();
	            break;
	        }
	        catch (error) {
	            {
	                console.log(`🚀 ~ file: workLoop.ts:16 ~ error:`, error);
	            }
	        }
	    } while (true);
	    // 中断执行
	    if (shouldTimeSlice && workInProgress !== null) {
	        return RootInComplete;
	    }
	    // render阶段执行完
	    if (!shouldTimeSlice && workInProgress !== null && true) {
	        console.error(`render阶段结束时wip不应该不是null`);
	    }
	    // TODO: 报错
	    return RootCompleted;
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn(`commit阶段开始`, finishedWork);
	    }
	    const lane = root.finishLane;
	    if (lane === NoLane && true) {
	        console.error('commit阶段finishLane不应该是NoLane');
	    }
	    // 重置
	    root.finishedWork = null;
	    root.finishLane = NoLane;
	    // 从一个lanes中移除某个lane
	    markRootFinished(root, lane);
	    if ((finishedWork.flags & PassiveMask) !== NoFlags ||
	        (finishedWork.subtreeFlags & PassiveMask) !== NoFlags) {
	        // 调度副作用
	        scheduler.unstable_scheduleCallback(scheduler.unstable_NormalPriority, () => {
	            // 执行副作用
	            flushPassiveEffects(root.pendingPassiveEffects);
	            return;
	        });
	    }
	    // 判断是否存在3个子阶段需要执行的操作
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        //阶段1/3: beforeMutation
	        //阶段2/3  Mutation Placement
	        commitMutationEffects(finishedWork, root);
	        // fiber Tree 切换
	        root.current = finishedWork;
	        //阶段3/3  layout
	        commitLayoutEffects(finishedWork, root);
	    }
	    else {
	        root.current = finishedWork;
	    }
	    ensureRootIsScheduled(root);
	}
	function flushPassiveEffects(pendingPassiveEffects) {
	    let didFlushPassiveEffect = false;
	    pendingPassiveEffects.unmount.forEach((effect) => {
	        didFlushPassiveEffect = true;
	        commitHookEffectListUnmount(Passive, effect);
	    });
	    pendingPassiveEffects.unmount = [];
	    pendingPassiveEffects.update.forEach((effect) => {
	        didFlushPassiveEffect = true;
	        commitHookEffectListDestroy(Passive | HookHasEffect, effect);
	    });
	    pendingPassiveEffects.update.forEach((effect) => {
	        didFlushPassiveEffect = true;
	        commitHookEffectListCreate(Passive | HookHasEffect, effect);
	    });
	    pendingPassiveEffects.update = [];
	    // 在回调的过程中也有可能触发新的更新，需要重新flush一下
	    flushSyncCallbacks();
	    return didFlushPassiveEffect;
	}
	function workLoopSync() {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function workLoopConcurrent() {
	    while (workInProgress !== null && !scheduler.unstable_shouldYield()) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    // 这个next 可能是当前fiber的子fiber 也可能是null
	    const next = beginWork(fiber, wipRootRenderLane);
	    // 结束之后
	    fiber.memoizedProps = fiber.pendingProps;
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	}
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            // 如果存在sibling，那么sibling 开始进入beginWork
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	}
	//  从传入的fiber开始，向上查找，直到找到root为止
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}

	function createContainer(container) {
	    /**
	     * 创建一个FiberNode，对应的tag类型是HostRoot
	     * 如果是一个普通的`<div>...</div>`，在创建其对应的FiberNode的时候，那么对应的tag类型是 HostComponent
	     * 如果是一个函数组件`<App/>`，在创建其对应的FiberNode的时候，那么对应的tag类型是FunctionComponent
	     *
	     * 所以：对于hostRootFiber这个fiber来说有2种含义，
	     * 第一种是：其对应的真实DOM是一个div,
	     * 第二种是：这个div不是普通的div,而且还是整个应用挂载的根节点
	     */
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    /*
	     * 在FiberRootNode中，将真实DOM和对应的fiber节点进行对应关联，形成关联关系
	     *  1. 将FiberRootNode.current 指向了 hostRootFiber
	     *  2. 将hostRootFiber的真实DOM指向了container
	     */
	    const root = new FiberRootNode(container, hostRootFiber);
	    /**
	     * FiberNode和 FiberRootNode这两者之间有什么不同呢？
	     * - 首先FiberRootNode对应的fiber节点不是普通的fiber节点，而是整个应用的根fiber节点，所以需要和普通的fiber区别对待
	     * 这个FiberRootNode对应的组件是我们需要挂载的整个应用的根root(也就是：document.getElementById("root"))
	     */
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	// render(<App />) 方法执行的时候就会执行这个方法
	function updateContainer(element, root) {
	    scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority, () => {
	        const hostRootFiber = root.current;
	        const lane = requestUpdateLane();
	        const update = createUpdate(element, lane);
	        enqueueUpdate(hostRootFiber.updateQueue, update);
	        scheduleUpdateOnFiber(hostRootFiber, lane);
	    });
	    return element;
	}

	//  ReactDOM.createRoot(root).render(<App/>)
	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            initEvent(container, 'click');
	            return updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
